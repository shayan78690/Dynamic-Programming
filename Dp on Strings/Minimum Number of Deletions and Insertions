import java.util.*;

public class Solution {
    public static int canYouMake(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        int lcs = longestCommonSubsequence(s1, s2, n, m);
        int insertion = m-lcs;
        int deletetion = n-lcs;
        return insertion + deletetion;
    }
    public static int longestCommonSubsequence(String s1, String s2, int n, int m) {
        int dp[][] = new int[n+1][m+1];
        for(int row[] : dp) {
            Arrays.fill(row, 0);
        }
        for(int i = 0; i <= n; i++) {
            dp[i][0] = 0;
        }

        for(int j = 0; j <= m; j++) {
            dp[0][j] = 0;
        }

        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
}
