import java.util.*;


public class Solution {

	public static int lcs(String s, String t) {
		int n = s.length();
		int m = t.length();
		int dp[][] = new int[n+1][m+1];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		for(int idx2 = 0; idx2 <= m; idx2++) {
			dp[0][idx2] = 0;
		}
		for(int idx1 = 0; idx1 <= n; idx1++) {
			dp[idx1][0] = 0;
		}

		for(int idx1 = 1; idx1 <= n; idx1++) {
			for(int idx2 = 1; idx2 <= m; idx2++) {
				if(s.charAt(idx1-1) == t.charAt(idx2-1)) {
					dp[idx1][idx2] = dp[idx1-1][idx2-1] + 1;
				}
		else {
			dp[idx1][idx2] = Math.max(dp[idx1-1][idx2], dp[idx1][idx2-1]);
			}	
			}
		}
		return dp[n][m];
    }
}









import java.util.*;


public class Solution {

	public static int lcs(String s, String t) {
		int n = s.length();
		int m = t.length();
		int dp[][] = new int[n+1][m+1];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(n, m, s, t, dp);
    }
	public static int func(int idx1, int idx2, String s, String t, int dp[][]) {
		if(idx1 == 0 || idx2 == 0) {
			return 0;
		}
		if(dp[idx1][idx2] != -1) {
			return dp[idx1][idx2];
		}
		if(s.charAt(idx1-1) == t.charAt(idx2-1)) {
			return dp[idx1][idx2] = func(idx1-1, idx2-1, s, t, dp) + 1;
		}
		return dp[idx1][idx2] = Math.max(func(idx1-1, idx2, s, t, dp), func(idx1, idx2-1, s, t, dp));
	}
}









import java.util.*;


public class Solution {

	public static int lcs(String s, String t) {
		int n = s.length();
		int m = t.length();
		int dp[][] = new int[n][m];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(n-1, m-1, s, t, dp);
    }
	public static int func(int idx1, int idx2, String s, String t, int dp[][]) {
		if(idx1 < 0 || idx2 < 0) {
			return 0;
		}
		if(dp[idx1][idx2] != -1) {
			return dp[idx1][idx2];
		}
		if(s.charAt(idx1) == t.charAt(idx2)) {
			return dp[idx1][idx2] = func(idx1-1, idx2-1, s, t, dp) + 1;
		}
		return dp[idx1][idx2] = Math.max(func(idx1-1, idx2, s, t, dp), func(idx1, idx2-1, s, t, dp));
	}
}
