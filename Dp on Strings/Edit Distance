class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n][m];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n - 1, m - 1, word1, word2, dp);
    }

    public int func(int i, int j, String word1, String word2, int dp[][]) {
        if (i < 0)
            return j + 1;
        if (j < 0)
            return i + 1;

        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (word1.charAt(i) == word2.charAt(j)) {
            return dp[i][j] = func(i - 1, j - 1, word1, word2, dp);
        }
        int insertion = 1 + func(i, j - 1, word1, word2, dp);
        int deletion = 1 + func(i - 1, j, word1, word2, dp);
        int replacing = 1 + func(i - 1, j - 1, word1, word2, dp);
        dp[i][j] = Math.min(insertion, Math.min(deletion, replacing));
        return dp[i][j];
    }
}











class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n+1][m+1];
        for (int row[] : dp) {
            Arrays.fill(row, 0);
        }
        for(int i = 0; i <= n; i++) {
            dp[i][0] = i;
        }
        for(int j = 0; j <= m; j++) {
            dp[0][j] = j;
        }

        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if (word1.charAt(i-1) == word2.charAt(j-1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    int insertion = 1 + dp[i][j - 1];
                    int deletion = 1 + dp[i - 1][j];
                    int replacing = 1 + dp[i - 1][j - 1];
                    dp[i][j] = Math.min(insertion, Math.min(deletion, replacing));
                }
            }
        }
        return dp[n][m];    
    }
}
