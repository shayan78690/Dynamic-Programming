class Solution {

    static int prime = (int) (Math.pow(10, 9) + 7);

    public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int dp[][] = new int[n+1][m+1];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        for(int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for(int j = 1; j <= m; j++) {
            dp[0][j] = 0;
        }

        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++)  {
                if (s.charAt(i-1) == t.charAt(j-1)) {
                    int leaveOne = dp[i - 1][j - 1];
                    int stay = dp[i - 1][j];
                    dp[i][j] = (leaveOne + stay) % prime;
                } else {
                        dp[i][j] = dp[i - 1][j];
                    }
            }
        }
        return dp[n][m];
    }
}


















class Solution {

    static int prime = (int) (Math.pow(10, 9) + 7);

    public int numDistinct(String s, String t) {
        int n = s.length();
        int m = t.length();
        int dp[][] = new int[n][m];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n - 1, m - 1, s, t, dp);
    }

    public int func(int i, int j, String s, String t, int dp[][]) {
        if (j < 0) {
            return 1;
        }
        if (i < 0) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (s.charAt(i) == t.charAt(j)) {
            int leaveOne = func(i - 1, j - 1, s, t, dp);
            int stay = func(i - 1, j, s, t, dp);
            return dp[i][j] = (leaveOne + stay) % prime;
        }
        return dp[i][j] = func(i - 1, j, s, t, dp);
    }
}
