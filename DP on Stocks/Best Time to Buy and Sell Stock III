class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n + 1][2][3];
        for (int row[][] : dp) {
            for (int col[] : row) {
                Arrays.fill(col, -1);
            }
        }
        return func(0, 1, 2, prices, dp);
    }

    public int func(int idx, int buy, int capacity, int prices[], int dp[][][]) {
        if (capacity == 0) {
            return 0;
        }
        if (idx == prices.length) {
            return 0;
        }
        if (dp[idx][buy][capacity] != -1) {
            return dp[idx][buy][capacity];
        }
        int profit;
        if (buy == 1) {
            int buy_yes = -prices[idx] + func(idx + 1, 0, capacity, prices, dp);
            int buy_no = 0 + func(idx + 1, 1, capacity, prices, dp);
            profit = Math.max(buy_yes, buy_no);
        } else {
            int sell_yes = prices[idx] + func(idx + 1, 1, capacity - 1, prices, dp);
            int sell_no = 0 + func(idx + 1, 0, capacity, prices, dp);
            profit = Math.max(sell_yes, sell_no);
        }
        dp[idx][buy][capacity] = profit;
        return dp[idx][buy][capacity];
    }
}













class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n + 1][2][3];
        for (int row[][] : dp) {
            for (int col[] : row) {
                Arrays.fill(col, 0);
            }
        }

        int profit;
        for (int idx = n - 1; idx >= 0; idx--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int capacity = 1; capacity <= 2; capacity++) {
                    if (buy == 1) {
                        int buy_yes = -prices[idx] + dp[idx + 1][0][capacity];
                        int buy_no = 0 + dp[idx + 1][1][capacity];
                        profit = Math.max(buy_yes, buy_no);
                    } else {
                        int sell_yes = prices[idx] + dp[idx + 1][1][capacity - 1];
                        int sell_no = 0 + dp[idx + 1][0][capacity];
                        profit = Math.max(sell_yes, sell_no);
                    }
                    dp[idx][buy][capacity] = profit;
                }
            }
        }
        return dp[0][1][2];
    }
}
