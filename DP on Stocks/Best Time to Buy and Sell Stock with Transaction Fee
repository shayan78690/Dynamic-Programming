class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int dp[][] = new int[n + 1][2];
        for (int row[] : dp) {
            Arrays.fill(row, 0);
        }

        int profit;
        for (int idx = n - 1; idx >= 0; idx--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy == 1) {
                    int buy_yes = -prices[idx] + dp[idx + 1][0];
                    int buy_no = 0 + dp[idx + 1][1];
                    profit = Math.max(buy_yes, buy_no);
                } else {
                    int sell_yes = prices[idx] + dp[idx + 1][1] - fee;
                    int sell_no = 0 + dp[idx + 1][0];
                    profit = Math.max(sell_yes, sell_no);
                }
                dp[idx][buy] = profit;
            }
        }

        return dp[0][1];
    }
}















class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int dp[][] = new int[n+1][2];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(0, 1, fee, n, prices, dp);
    }

    public int func(int idx, int buy, int fee, int n, int prices[], int dp[][]) {
        if (idx == n) {
            return 0;
        }

        if(dp[idx][buy] != -1) {
            return dp[idx][buy];
        }
        int profit;
        if (buy == 1) {
            int buy_yes = -prices[idx] + func(idx + 1, 0, fee, n, prices, dp);
            int buy_no = 0 + func(idx + 1, 1, fee, n, prices, dp);
            profit = Math.max(buy_yes, buy_no);
        } else {
            int sell_yes = prices[idx] + func(idx + 1, 1, fee, n, prices, dp) - fee;
            int sell_no = 0 + func(idx + 1, 0, fee, n, prices, dp);
            profit = Math.max(sell_yes, sell_no);
        }
        dp[idx][buy] = profit;
        return dp[idx][buy];
    }
}
