class Solution {
    public int tribonacci(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return func(n, dp);
    }
    public int func(int n, int dp[]) {
        if(n == 0) {
            return 0;
        }
        if(n == 1 || n == 2) {
            return 1;
        }
        if(dp[n] != -1) {
            return dp[n];
        }
        dp[n] = func(n-1, dp) + func(n-2, dp) + func(n-3, dp);
        return dp[n];
    }
}

class Solution {
    public int tribonacci(int n) {
        if(n == 0) {
            return 0;
        }
        
        int prev3 = 0;
        int prev2 = 1;
        int prev1 = 1;
        for(int i = 3; i <= n; i++) {
            int current = prev1 + prev2 + prev3;
            prev3 = prev2;
            prev2 = prev1;
            prev1 = current;
        }
        return prev1;
    }
}
