class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int dp[] = new int[n];
        Arrays.fill(dp, -1);
        return func(0, k, arr, dp);
    }
    public int func(int idx, int k, int arr[], int dp[]) {
        if(idx == arr.length) {
            return 0;
        }
        if(dp[idx] != -1) {
            return dp[idx];
        }
        int maxi = Integer.MIN_VALUE;
        int maxAns = Integer.MIN_VALUE;
        for(int j = idx; j < arr.length; j++) {
            int len = j-idx+1;
            maxi = Math.max(maxi, arr[j]);
            if(len <= k) {
                int sum = len * maxi + func(j+1, k, arr, dp);
                maxAns = Math.max(maxAns, sum);
            }
        }
        return dp[idx] = maxAns;
    }
}
