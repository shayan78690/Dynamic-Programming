import java.util.* ;
import java.io.*; 
public class Solution {
    public static int cost(int n, int c, int cuts[]) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(0);
        for(int cut : cuts) {
            list.add(cut);
        }
        list.add(n);
        Collections.sort(list);
        int dp[][] = new int[list.size()+1][list.size()+1];
        for(int row[] : dp) {
            Arrays.fill(row, 0);
        }
        for(int i = c; i >= 1; i--) {
            for(int j = 1; j <= c; j++) {
                if(i > j) {
                    continue;
                }
                int mini = Integer.MAX_VALUE;
                for(int k = i; k <= j; k++) {
                    int ans = (list.get(j+1) - list.get(i-1)) + dp[i][k-1] + dp[k+1][j];
                    mini = Math.min(mini, ans);
                }
                dp[i][j] = mini;
            }
        }

        return dp[1][c];
    }

}










public class Solution {
    public int minCost(int n, int[] cuts) {
        List<Integer> cutList = new ArrayList<>();
        cutList.add(0);
        for (int cut : cuts)
            cutList.add(cut);
        cutList.add(n);
        Collections.sort(cutList);
        int dp[][] = new int[cutList.size() + 1][cutList.size() + 1];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }

        return func(1, cutList.size() - 2, cutList, dp);
    }

    private int func(int i, int j, List<Integer> cuts, int dp[][]) {
        if (i > j)
            return 0;
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int minCost = Integer.MAX_VALUE;
        for (int k = i; k <= j; k++) {
            int cost = (cuts.get(j + 1) - cuts.get(i - 1))
                    + func(i, k - 1, cuts, dp)
                    + func(k + 1, j, cuts, dp);
            minCost = Math.min(minCost, cost);
        }
        dp[i][j] = minCost;
        return dp[i][j];
    }
}
