import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		int n = nums.size();
		int dp[] = new int[n+1];
		Arrays.fill(dp, -1);
		return func(n-1, dp, nums);
	}

	public static int func(int index, int dp[], ArrayList<Integer> nums) {
		if(index < 0) {
			return 0;
		}
		if(index == 0) {
			return nums.get(0);
		}
		if(dp[index] != -1) {
			return dp[index];
		}
		int pick = func(index-2, dp, nums) + nums.get(index);
		int not_pick = func(index-1, dp, nums) + 0;

		dp[index] = Math.max(pick, not_pick);
		return dp[index];
	}
}





class Solution {
    int findMaxSum(int arr[]) {
        int n = arr.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        dp[0] = arr[0];
        
        
        for(int i = 1; i < n; i++) {
            int pick = arr[i];
            if(i > 1) {
                pick += dp[i-2];
            }
            int not_pick = dp[i-1];
            dp[i] = Math.max(pick, not_pick);
        }
        return dp[n-1];
    }
}









class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int prev1 = nums[0];
        int prev2 = 0;
        for(int i = 1; i < n; i++) {
            int pick = nums[i];
            if(i > 1) {
                pick += prev2;
            }
            int not_pick = prev1;
            int current = Math.max(pick, not_pick);
            prev2 = prev1;
            prev1 = current;
        }
        return prev1;
    }
}






