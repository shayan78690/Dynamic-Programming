import java.util.* ;
import java.io.*; 
public class Solution {
    public static int frogJump(int n, int heights[]) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return func(n-1, dp, heights);
    }
    public static int func(int index, int dp[], int heights[]) {
        if(index == 0) {
            return 0;
        }
        if(dp[index] != -1) {
            return dp[index];
        }
        int left = func(index-1, dp, heights) + Math.abs(heights[index] - heights[index-1]);
        int right = Integer.MAX_VALUE;
        if(index > 1) {
            right = func(index-2, dp, heights) + Math.abs(heights[index] - heights[index-2]);
        }
        dp[index] = Math.min(left, right);
        return dp[index];
    }
}




class Solution {
    int minCost(int[] height) {
        int n = height.length;
        int dp[] = new int[n+1];
        for(int i = 0; i <= n; i++) {
            dp[i] = -1;
        }
        
        if(n == 0) {
            return 0;
        }
        dp[0] = 0;
        for(int i = 1; i < n; i++) {
            int left = dp[i-1] + Math.abs(height[i] - height[i-1]);
            int right = Integer.MAX_VALUE;
            if(i > 1) {
                right = dp[i-2] + Math.abs(height[i] - height[i-2]);
            }
            dp[i] = Math.min(left, right);
        }
        return dp[n-1];
        
    }
    
}
