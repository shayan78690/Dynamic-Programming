class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][] = new int[n][amount + 1];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        for (int target = 0; target <= amount; target++) {
            if (target % coins[0] == 0) {
                dp[0][target] = target / coins[0];
            } else {
                dp[0][target] = (int) Math.pow(10, 9);
            }
        }

        for (int i = 1; i < n; i++) {
            for (int target = 0; target <= amount; target++) {
                int not_take = dp[i - 1][target];
                int take = (int) Math.pow(10, 9);
                if (coins[i] <= target) {
                    take = dp[i][target - coins[i]] + 1;
                }
                dp[i][target] = Math.min(take, not_take);
            }
        }
        int result = dp[n - 1][amount];
        return result == (int) Math.pow(10, 9) ? -1 : result;
    }
}
