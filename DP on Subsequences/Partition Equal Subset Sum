class Solution {
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if (sum % 2 != 0) {
            return false;
        }
        int k = sum / 2;

        boolean dp[][] = new boolean[n][k + 1];
        for (boolean row[] : dp) {
            Arrays.fill(row, false);
        }

        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }
        if (nums[0] <= k) {
            dp[0][nums[0]] = true;
        }

        for (int idx = 1; idx < n; idx++) {
            for (int target = 1; target <= k; target++) {
                boolean not_pick = dp[idx - 1][target];
                boolean pick = false;
                if (nums[idx] <= target) {
                    pick = dp[idx - 1][target - nums[idx]];
                }
                dp[idx][target] = pick || not_pick;
            }
        }
        return dp[n - 1][k];
    }
}








import java.util.*;

public class Solution {
	public static boolean canPartition(int[] arr, int n) {
		int sum = 0;
		for(int i = 0; i < n; i++) {
			sum += arr[i];
		}
		if(sum % 2 != 0) {
			return false;
		}
		int target = sum / 2;
		int dp[][] = new int[n][target+1];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(n-1, target, arr, dp);
	}

	public static boolean  func(int idx, int target, int arr[], int dp[][]) {
		if(target == 0) {
			return true;
		}
		if(idx == 0) {
			return target == arr[0];
		}
		if(dp[idx][target] != -1) {
			return dp[idx][target] == 1;
		}

		boolean not_pick = func(idx-1, target, arr, dp);
		boolean pick = false;
		if(arr[idx] <= target) {
			pick = func(idx-1, target - arr[idx], arr, dp);
		}
		
		dp[idx][target] = not_pick || pick ? 1 : 0;
		return dp[idx][target] == 1;
	}
}
