import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        int dp[][] = new int[n][k+1];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, k, arr, dp);
    }

    public static boolean func(int idx, int k, int arr[], int dp[][]) {
        if(k == 0) {
            return true;
        }
        if(idx == 0) {
            return arr[0] == k;
        }
        if(dp[idx][k] != -1) {
            return dp[idx][k] == 1;
        }

        boolean not_take = func(idx-1, k, arr, dp);
        boolean take = false;
        if(arr[idx] <= k) {
            take = func(idx-1, k-arr[idx], arr, dp);
        }

        dp[idx][k] = (take || not_take) ? 1 : 0;
        return dp[idx][k] == 1;
    }
}








import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        return func(n-1, k, arr);
    }

    public static boolean func(int idx, int k, int arr[]) {
        if(k == 0) {
            return true;
        }
        if(idx == 0) {
            return arr[0] == k;
        }

        boolean not_take = func(idx-1, k, arr);
        boolean take = false;
        if(arr[idx] <= k) {
            take = func(idx-1, k-arr[idx], arr);
        }
        return take || not_take;
    }
}

