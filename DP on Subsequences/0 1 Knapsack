import java.util.ArrayList;
import java.util.*;
public class Solution {
	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {
		int dp[][] = new int[n][w+1];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(n-1, w, values, weights, dp);
	}

	public static int func(int idx, int W, ArrayList<Integer> values, ArrayList<Integer> weights, int dp[][]) {
		if(idx == 0) {
			if(weights.get(0) <= W) {
				return values.get(0);
			} else {
				return 0;
			}
		}
        if(dp[idx][W] != -1) {
			return dp[idx][W];
		}
		int not_take = func(idx-1, W, values, weights, dp);
		int take = Integer.MIN_VALUE;
		if(weights.get(idx) <= W) {
			take = func(idx-1, W-weights.get(idx), values, weights, dp) + values.get(idx);
		}
		dp[idx][W] = Math.max(take, not_take);
		return dp[idx][W];
	}
}
