import java.util.ArrayList;
import java.util.*;
public class Solution {
	public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {
		int dp[][] = new int[n][w+1];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(n-1, w, values, weights, dp);
	}

	public static int func(int idx, int W, ArrayList<Integer> values, ArrayList<Integer> weights, int dp[][]) {
		if(idx == 0) {
			if(weights.get(0) <= W) {
				return values.get(0);
			} else {
				return 0;
			}
		}
        if(dp[idx][W] != -1) {
			return dp[idx][W];
		}
		int not_take = func(idx-1, W, values, weights, dp);
		int take = Integer.MIN_VALUE;
		if(weights.get(idx) <= W) {
			take = func(idx-1, W-weights.get(idx), values, weights, dp) + values.get(idx);
		}
		dp[idx][W] = Math.max(take, not_take);
		return dp[idx][W];
	}
}









class Solution {
    static int knapsack(int W, int val[], int wt[]) {
    int n = val.length; // n is 3
    int dp[][] = new int[n][W + 1]; // dp is int[3][5] (indices 0 to 2 for rows, 0 to 4 for columns)

    // Base Case: For the first item (idx = 0)
    for (int w = 0; w <= W; w++) { // w goes from 0 to 4
        if (wt[0] <= w) { // wt[0] is 4
            dp[0][w] = val[0]; // dp[0][4] = 1
        } else {
            dp[0][w] = 0; // dp[0][0] to dp[0][3] will be 0
        }
    }

    // Choice Diagram
    for (int idx = 1; idx < n; idx++) { // idx goes from 1 to 2
        for (int w = 0; w <= W; w++) { // w goes from 0 to 4
            int not_pick = dp[idx - 1][w]; // Accessing dp[0][w]
            int pick = Integer.MIN_VALUE;
            if (wt[idx] <= w) {
                pick = dp[idx - 1][w - wt[idx]] + val[idx]; // Accessing dp[0][w - wt[idx]]
            }
            dp[idx][w] = Math.max(pick, not_pick); // Assigning to dp[idx][w]
        }
    }
    return dp[n - 1][W]; // Returning dp[2][4]

    }
}
