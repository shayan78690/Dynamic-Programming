import java.util.*;
import java.io.*;

public class Solution {
    static final int mod = 1000000007;
    public static int findWays(int num[], int tar) {
        int n = num.length;
        int dp[][] = new int[n][tar+1];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, tar, num, dp);
    }

    public static int func(int idx, int target, int nums[], int dp[][]) {
        if(idx == 0) {
            if(nums[0] == 0 && target == 0) {
                return 2;
            }
            if(target == nums[0] || target == 0) {
                return 1;
            } 
            else {
                return 0;
            }
        }

        if(dp[idx][target] != -1) {
            return dp[idx][target];
        }
        int not_take = func(idx-1, target, nums, dp);
        int take = 0;
        if(nums[idx] <= target) {
            take = func(idx-1, target-nums[idx], nums, dp);
        }
        dp[idx][target] = (take + not_take) % mod;
        return dp[idx][target];
    }
}









import java.util.*;
import java.io.*;

public class Solution {

    static final int mod = 1000000007;
    public static int findWays(int num[], int tar) {
        int n = num.length;
        int dp[][] = new int[n][tar+1];
        for(int row[] : dp) {
            Arrays.fill(row, 0); // Initialize to 0 instead of -1 since we're adding counts
        }
        for(int i = 0; i < n; i++) {
            dp[i][0] = 1; // One way to make sum 0: take no elements
        }
        if (num[0] <= tar) {
            dp[0][num[0]] = 1;
        }
        // Handle the case where num[0] is 0, but according to problem constraints, it might vary
        // For this code, assuming num[0] is positive as per general subset sum problem

        for(int idx = 1; idx < n; idx++) {
            for(int target = 0; target <= tar; target++) {
                int not_take = dp[idx-1][target];
                int take = 0;
                if(num[idx] <= target) {
                    take = dp[idx-1][target - num[idx]];
                }
                dp[idx][target] = (take + not_take) % mod;
            }
        }

        return dp[n-1][tar];
    }
}
