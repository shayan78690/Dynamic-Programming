import java.util.*;

public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += arr[i];
        }
        int target = sum;
        boolean dp[][] = new boolean[n][target+1];
        for(boolean row[] : dp) {
            Arrays.fill(row, false);
        }

        for(int i = 0; i < n; i++) {
            dp[i][0] = true;
        }
        if(arr[0] <= target) {
            dp[0][arr[0]] = true;
        }
        

        for(int idx = 1; idx < n; idx++) {
            for(int tar = 1; tar <= target; tar++) {
                boolean not_pick = dp[idx-1][tar];
                boolean pick = false;
                if(arr[idx] <= tar) {
                    pick = dp[idx-1][tar-arr[idx]];
                }
                dp[idx][tar] = pick || not_pick;
            }
        }

        int min = (int) 1e9;
        for(int s1 = 0; s1 <= sum; s1++) {
            if(dp[n-1][s1]) {
                int set1 = s1;
                int set2 = sum - set1;
                min = Math.min(min, Math.abs(set1-set2));
            }
        }
        return min;

    }
}
