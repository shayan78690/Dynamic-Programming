import java.util.*;

public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        int dp[][] = new int[n][w + 1];
        
        // Base case: first item
        for (int i = 0; i <= w; i++) {
            dp[0][i] = (i / weight[0]) * profit[0];
        }
        
        for (int idx = 1; idx < n; idx++) {
            for (int W = 0; W <= w; W++) {
                int not_pick = dp[idx - 1][W];
                int pick = Integer.MIN_VALUE;
                if (weight[idx] <= W) {
                    pick = dp[idx][W - weight[idx]] + profit[idx];
                }
                dp[idx][W] = Math.max(pick, not_pick);
            }
        }
        
        return dp[n - 1][w];
    }
}
