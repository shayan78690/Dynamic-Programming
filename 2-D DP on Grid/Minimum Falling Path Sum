import java.util.* ;
import java.io.*; 
public class Solution {
	static int minFallingPathSum(ArrayList<ArrayList<Integer>> vec, int n) {
		int dp[][] = new int[n][n];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		int min = Integer.MAX_VALUE;
		for(int j = 0; j < n; j++) {
			int ans = func(vec, n-1, j, dp);
			min = Math.min(min, ans);
		}
		return min;
	}
	static int func(ArrayList<ArrayList<Integer>> vec, int i, int j, int dp[][]) {
		if(j < 0 || j >= vec.get(i).size()) {
			return (int)Math.pow(10, 9);
		}
		if(i == 0) {
			return vec.get(0).get(j);
		}
		if(dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = vec.get(i).get(j) + func(vec, i-1, j, dp);
		int ld = vec.get(i).get(j) + func(vec, i-1, j-1, dp);
		int rd = vec.get(i).get(j) + func(vec, i-1, j+1, dp);

		dp[i][j] = Math.min(up, Math.min(ld, rd));
		return dp[i][j];
	}
}
