class Solution {
    public int maximumPoints(int arr[][]) {
        int n = arr.length;
        int prev[]= new int[4];
        prev[0] = Math.max(arr[0][1], arr[0][2]);
        prev[0] = Math.max(arr[0][0], arr[0][2]);
        prev[0] = Math.max(arr[0][0], arr[0][1]);
        prev[0] = Math.max(arr[0][0], Math.max(arr[0][1], arr[0][2]));
    
        for (int day = 1; day < n; day++) {
            int[] temp = new int[4];
            for (int last = 0; last < 4; last++) {
                temp[last] = 0;
                for (int task = 0; task < 3; task++) {
                    if (task != last) {
                        int point = arr[day][task] + prev[task];
                        temp[last] = Math.max(temp[last], point);
                    }
                }
            }
            prev = temp;
        }
        return prev[3];
    }
}







import java.util.*;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];

        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        for (int day = 1; day < n; day++) {
            for (int last = 0; last < 4; last++) {
                dp[day][last] = 0;
                for (int task = 0; task < 3; task++) {
                    if (task != last) {
                        int activity = points[day][task] + dp[day - 1][task];
                        dp[day][last] = Math.max(dp[day][last], activity);
                    }
                }
            }
        }

        return dp[n - 1][3];
    }
}










import java.util.*;

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int dp[][] = new int[n][4];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, 3, points, dp);
    }
    public static int func(int day, int last, int points[][], int dp[][]) {
        if(day == 0) {
            int max = 0;
            for(int task = 0; task < 3; task++) {
                if(task != last) {
                    max = Math.max(max, points[0][task]);
                }
            }
            return max;
        }
        if(dp[day][last] != -1) {
            return dp[day][last];
        }

        int max = 0;
        for(int task = 0; task < 3; task++) {
            if(task != last) {
                int activity = points[day][task] + func(day-1, task, points, dp);
                max = Math.max(activity, max);
            }
        }
        dp[day][last] = max;
        return dp[day][last];
    }

}









public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        return func(n-1, 3, points);
    }
    public static int func(int day, int last, int points[][]) {
        if(day == 0) {
            int max = 0;
            for(int task = 0; task < 3; task++) {
                if(task != last) {
                    max = Math.max(max, points[0][task]);
                }
            }
            return max;
        }

        int max = 0;
        for(int task = 0; task < 3; task++) {
            if(task != last) {
                int activity = points[day][task] + func(day-1, task, points);
                max = Math.max(activity, max);
            }
        }
        return max;
    }

}
