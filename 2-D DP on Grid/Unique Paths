class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                } 
                int up = 0;
                int left = 0;
                if(i > 0) {
                    up = dp[i-1][j];
                }
                if(j > 0) {
                    left = dp[i][j-1];
                }

                dp[i][j] = up + left;
            }
        }
        return dp[m-1][n-1];
    }
}










import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		int dp[][] = new int[m][n];
		for(int row[] : dp) {
			Arrays.fill(row, -1);
		}
		return func(m-1, n-1, dp);
	}
	public static int func(int i, int j, int dp[][]) {
		if(i == 0 && j == 0) {
			return 1;
		}
		if(i < 0 || j < 0) {
			return 0;
		}
		if(dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = func(i-1, j, dp);
		int left = func(i, j-1, dp);
		dp[i][j] = up + left;
		return dp[i][j];
	}
}








import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		return func(m-1, n-1);
	}
	public static int func(int i, int j) {
		if(i == 0 && j == 0) {
			return 1;
		}
		if(i < 0 || j < 0) {
			return 0;
		}
		int up = func(i-1, j);
		int left = func(i, j-1);
		return up + left;
	}
}
