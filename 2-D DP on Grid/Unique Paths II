class Solution {
    int MOD = 2 * 1000000007;
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int dp[][] = new int[n][m];
        dp[0][0] = 1;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
              
                if(i >= 0 && j >= 0 && obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                else if(i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                } 
                int up = 0;
                int left = 0;
                if(i > 0) {
                    up = dp[i-1][j];
                }
                if(j > 0) {
                    left = dp[i][j-1];
                }
                dp[i][j] = (up + left) % MOD;
            }
        }
        return dp[n-1][m-1];
    }
}








import java.util.ArrayList;
import java.util.*;

public class Solution {

    static int MOD = 1000000007;
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][] = new int[n][m];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, m-1, mat, dp);
    }
    static int func(int i, int j, ArrayList<ArrayList<Integer>> mat, int dp[][]) {
        if (i < 0 || j < 0) return 0;
        if (mat.get(i).get(j) == -1) return 0;
        if (i == 0 && j == 0) return 1;

        if(dp[i][j] != -1) {
            return dp[i][j];
        }

        int up = func(i-1, j, mat, dp);
        int left = func(i, j-1, mat, dp);

        dp[i][j] = (up + left) % MOD;
        return dp[i][j];
    }
}
