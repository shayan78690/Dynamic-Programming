class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int dp[][] = new int[n][n];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        for(int j = 0; j < n; j++) {
            dp[n-1][j] = triangle.get(n-1).get(j);
        }

        for(int i = n-2; i >= 0; i--) {
            for(int j = i; j >= 0; j--) {
                int down = triangle.get(i).get(j) + dp[i+1][j];
                int diagonal = triangle.get(i).get(j) + dp[i+1][j+1];
                dp[i][j] = Math.min(down, diagonal);
            }
        }
        return dp[0][0];
    }
}












import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int dp[][] = new int[n][n];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(triangle, 0, 0, dp);
    }
    public static int func(int triangle[][], int i, int j, int dp[][]) {
        if(i == triangle.length-1) {
            return triangle[triangle.length-1][j];
        }
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        int down = triangle[i][j] + func(triangle, i+1, j, dp);
        int diagonal = triangle[i][j] + func(triangle, i+1, j+1, dp);
        dp[i][j] = Math.min(down, diagonal);

        return dp[i][j];
    }
}












import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        return func(triangle, 0, 0);
    }
    public static int func(int triangle[][], int i, int j) {
        if(i == triangle.length-1) {
            return triangle[triangle.length-1][j];
        }
        int down = func(triangle, i+1, j);
        int diagonal = func(triangle, i+1, j+1);

        return Math.min(down, diagonal);
    }
}
