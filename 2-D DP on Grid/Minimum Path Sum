class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int dp[][] = new int[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(i == 0 && j == 0) {
                    dp[i][j] = grid[i][j];
                    continue;
                }
                int up = grid[i][j];
                if(i > 0) {
                    up += dp[i-1][j];
                } else {
                    up = Integer.MAX_VALUE;
                }
                

                int left = grid[i][j];
                if(j > 0) {
                    left += dp[i][j-1];
                } else {
                    left = Integer.MAX_VALUE;
                }
                dp[i][j] = Math.min(up, left);
            }
        }
        return dp[n-1][m-1];
    }
}








import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length;
        int m = grid[0].length;
        int dp[][] = new int[n][m];
        for(int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(n-1, m-1, grid, dp);
    }

    public static int func(int i, int j, int grid[][], int dp[][]) {
        if(i == 0 && j == 0) {
            return grid[0][0];
        }
        if(i < 0 || j < 0) {
            return (int)1e9;
        }

        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        int up = grid[i][j] + func(i-1, j, grid, dp);
        int left = grid[i][j] + func(i, j-1, grid, dp);

        return dp[i][j] = Math.min(up, left);
    }
}












import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
    	int n = grid.length;
        int m = grid[0].length;
        return func(n-1, m-1, grid);
    }

    public static int func(int i, int j, int grid[][]) {
        if(i == 0 && j == 0) {
            return grid[0][0];
        }
        if(i < 0 || j < 0) {
            return Integer.MAX_VALUE;
        }

        int up = grid[i][j] + func(i-1, j, grid);
        int left = grid[i][j] + func(i, j-1, grid);

        return Math.min(up, left);
    }
}
