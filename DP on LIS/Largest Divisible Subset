import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        if (n == 0) return new ArrayList<>(); // Handle empty array

        Arrays.sort(nums); // Sort the array to ensure divisibility condition

        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int[] hash = new int[n];
        for (int i = 0; i < n; i++) {
            hash[i] = i; // Initialize with their own index
        }

        for (int idx = 1; idx < n; idx++) {
            for (int prevIdx = 0; prevIdx < idx; prevIdx++) {
                if (nums[idx] % nums[prevIdx] == 0 && dp[prevIdx] + 1 > dp[idx]) {
                    dp[idx] = dp[prevIdx] + 1;
                    hash[idx] = prevIdx;
                }
            }
        }

        int maxLength = 0;
        int lastIdx = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] > maxLength) {
                maxLength = dp[i];
                lastIdx = i;
            }
        }

        List<Integer> subset = new ArrayList<>();
        subset.add(nums[lastIdx]);
        while (hash[lastIdx] != lastIdx) {
            lastIdx = hash[lastIdx];
            subset.add(nums[lastIdx]);
        }

        Collections.reverse(subset); 
        return subset;
    }
}
