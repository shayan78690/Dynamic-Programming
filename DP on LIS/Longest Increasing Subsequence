class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n + 1];
        for (int row[] : dp) {
            Arrays.fill(row, 0);
        }
        for(int idx = n-1; idx >= 0; idx--) {
            for(int prevIdx = idx-1; prevIdx >= -1; prevIdx--) {
                int not_take = 0 + dp[idx + 1][prevIdx+1];
                int take = 0;
                if (prevIdx == -1 || nums[idx] > nums[prevIdx]) {
                take = dp[idx + 1][idx+1] + 1;
                }
                dp[idx][prevIdx + 1] = Math.max(not_take, take);
                }
            }
        return dp[0][-1+1];
    }
}














class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n][n + 1];
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return func(0, -1, n, nums, dp);
    }

    public int func(int idx, int prevIdx, int n, int nums[], int dp[][]) {
        if (idx == n) {
            return 0;
        }
        if (dp[idx][prevIdx + 1] != -1) {
            return dp[idx][prevIdx + 1];
        }
        int not_take = 0 + func(idx + 1, prevIdx, n, nums, dp);
        int take = 0;
        if (prevIdx == -1 || nums[idx] > nums[prevIdx]) {
            take = func(idx + 1, idx, n, nums, dp) + 1;
        }
        dp[idx][prevIdx + 1] = Math.max(not_take, take);
        return dp[idx][prevIdx + 1];
    }
}
